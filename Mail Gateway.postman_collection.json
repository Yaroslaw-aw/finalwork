{
	"info": {
		"_postman_id": "ac7dc558-05aa-4515-af6a-13079d5f6f75",
		"name": "Mail Gateway",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31262839"
	},
	"item": [
		{
			"name": "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2IiwidHlwIjoiSldUIn0.eyJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3ByaW1hcnlzaWQiOiI0ZjZkODcyZi00MzllLTQxMzgtOWI2ZC01NGEwOGY4MmY1MDEiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJWYXN5YUBtYWlsLnJ1IiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjoiQWRtaW5pc3RyYXRvciIsImV4cCI6MTcxMTUzMDY2OSwiaXNzIjoicmVnaG9zdCIsImF1ZCI6Im1haWxob3N0In0.lo8XPzggGCRWPTpVln3X5DLxVeG0w5eKy9n-dAbdwEZIsDJHJgoNa9f9NrFF-SR486jWzzvg4dYpZBNwY5T86Bak2V_6EKoFa9kKgb6fgOhEjueuU3Yl3qFzTexy-DvKzT25S0sHLeQBI0C8yrtfvq_xsUriJJ-O7cn7RILKoLVOrye1pHrAhT3OWfldgVrNB5jfWz7vKqHYLNJ94yMtPUFgdMj9WRKnIOCPYhDd1pPViuJ7ZR8Q0rKbn-N-aiRMfuKAGs8tCj9UNNOmvSqOFwoBayEDAJI1Hy7LLNQF3zOXHHRdX7-3nTTxuF2tRP6N5aIMsukURpCNmmoAo5Iwag",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9093/User/GetUsers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9093",
					"path": [
						"User",
						"GetUsers"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2IiwidHlwIjoiSldUIn0.eyJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3ByaW1hcnlzaWQiOiIyZmUwYTU3My1hMjAwLTQxODctOGNhZi1jZTI2NDUzZjQwNmUiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJWYXN5YUBtYWlsLnJ1IiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjoiQWRtaW5pc3RyYXRvciIsImV4cCI6MTcxMTUwMDY3NSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MTM4IiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo1MjQxIn0.g5s6lHbK6TQAJ-K3PpVQCwn53RUaSIk3cL8vq0TrLz4Ovw_SOZPXOmuTGcqeLVW0ESnOdP1tUECwh83B_EOfh6Mmi_qrULAhqoFrYLqtDlkHfGd4wVP5_ye1ggMOakEiVCBpsi8YHlIKmwl8q6u9YWxQntSKtyPOXxg388NLiYDnEKkC7ZJU5Z9iZM5pC3rptPS3O-1YaMQU5Fwt1hyeX9kskRweLarCrrn0NYqx-6bU2CSUaU1s5JvbDxa0pJnNiD499EXc8KNZSR-sMxNYcUEGOz1XomXJk9VvCTyUDfTGDviLKZWMfPcy64rp5LcOiUbcHppR-19rUds0N0gsfQ",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5210/Server/GetMessages",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5210",
					"path": [
						"Server",
						"GetMessages"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "–¢–µ–∫—É—â–∏–π Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5241/User/GetCurrentUserId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5241",
					"path": [
						"User",
						"GetCurrentUserId"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5241/User/GetMessages",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5241",
					"path": [
						"User",
						"GetMessages"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Login Vasya (admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"Vasya@mail.ru\",\n  \"password\": \"Admin123!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9093/Login/Login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9093",
					"path": [
						"Login",
						"Login"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Login Kolya",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"Kolya@mail.ru\",\n  \"password\": \"Admin123!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9093/Login/Login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9093",
					"path": [
						"Login",
						"Login"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Login Kostya",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"Kostya@mail.ru\",\n  \"password\": \"Admin123!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9093/Login/Login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9093",
					"path": [
						"Login",
						"Login"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"Kostya@mail.ru\",\n  \"password\": \"Admin123!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9093/User/AddUser",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9093",
					"path": [
						"User",
						"AddUser"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "–ù–∞–ø–∏—Å–∞—Ç—å –ö–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2IiwidHlwIjoiSldUIn0.eyJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3ByaW1hcnlzaWQiOiJkNDAxYTUwYy00M2I4LTRhOGEtYjUyYi1hYmMzNTBmNDc2MWUiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJLb3N0eWFAbWFpbC5ydSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IlVzZXIiLCJleHAiOjE3MTE2NDY1ODEsImlzcyI6InJlZ2hvc3QiLCJhdWQiOiJtYWlsaG9zdCJ9.eMtxwhOHCFfhV9kM6dRJgXhlZ7G6hk4vsAyTYrJqSGd6ipyLn0M1iioJdyN3KFMkboTu19t4RXUhSjZCqF6GuUk5p0avQe91YK6V2vwsNQos6VYsDjKDZW56kK4lL1RsjlKO5Ac3O-W38RxV63yuIrkZLtmJ0ga_9_IfhV0gNAUO1HX5Bn2MAprctoXrTbmKSryQgnVpdjzFtewZlCfD-qVdxr1wxVUtLb9pEclOMlo0-ydae-EToSm61EjiLHsi43oAJndp2axJtzzHGW2pRkwNt1aib5Y-AoE1Qy6uxKctg9InzTex_8NO3S8HRHRrX9O2pnv_WCHP8_F1Tuf7pg",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"consumerId\": \"5b583f51-fc2d-47ca-ad74-0f2732bbf73e\",\n  \"content\": \"Hi Kolya!!!123 –ó–¥–æ—Ä–æ–≤–∞, –ö–æ–ª—è—Å–∏–∫!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9093/Server/WriteMessage?ConsumerId=5b583f51-fc2d-47ca-ad74-0f2732bbf73e&Content=Hi, Kolyasik! –≠—Ç–æ –ö–æ—Å—Ç—è!",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9093",
					"path": [
						"Server",
						"WriteMessage"
					],
					"query": [
						{
							"key": "ConsumerId",
							"value": "5b583f51-fc2d-47ca-ad74-0f2732bbf73e"
						},
						{
							"key": "Content",
							"value": "Hi, Kolyasik! –≠—Ç–æ –ö–æ—Å—Ç—è!"
						}
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "–ù–∞–ø–∏—Å–∞—Ç—å –ö–æ—Å—Ç–µ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2IiwidHlwIjoiSldUIn0.eyJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3ByaW1hcnlzaWQiOiI5NTVmYWFiOS1kNzEzLTQwZTctYjJjZC0zNjdhZmRmNDcxMTYiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJLb3N0eWFAbWFpbC5ydSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFkbWluaXN0cmF0b3IiLCJleHAiOjE3MTE1MDY5MTcsImlzcyI6InJlZ2hvc3QiLCJhdWQiOiJtYWlsaG9zdCJ9.U4N44g_kd6g0p6njsKe6ZY5iYvrCL50DmLkJOygIl5nWk80LxRwwx11G7YlbWoNh_AMJ-bM0Vk1jqcnRP5Qb4dVxs8mvqNOJ2tPj6yjauJUCKjquLu9DTs-RmLBtP0fIBZJM8YSjcgpuvZBOq746TKTf9W5GvtKJcdqQeKqfJPrGMmdyKqFnGbnNhsAc3o6bmmUIpAYOSF_oTVA77jvVVZq0OMO8iIylp0q9AmoQUYFCSnQgo9CEyAOHV-FndnKcQVyk7imqo5LtUZKrMnTuLjh_EVaj0oRypGv5jbwLj8Ez7gctzXvmitRv8VXWb-NGvGTHnLzyBcwuChZp66-0Xg",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"consumerId\": \"6088b012-7f7d-4457-980f-c640e3a372dc\",\n  \"content\": \"Hi Kolya!!!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9093/Server/WriteMessage?ConsumerId=6088b012-7f7d-4457-980f-c640e3a372dc&Content=Hi, Kolyasik!",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9093",
					"path": [
						"Server",
						"WriteMessage"
					],
					"query": [
						{
							"key": "ConsumerId",
							"value": "6088b012-7f7d-4457-980f-c640e3a372dc"
						},
						{
							"key": "Content",
							"value": "Hi, Kolyasik!"
						}
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2IiwidHlwIjoiSldUIn0.eyJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3ByaW1hcnlzaWQiOiJkZDUyNTM1Ni1jMzRkLTQ4NDgtYWNmMi04YjY4MzFlODNlYTciLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiJLb3N0eWFAbWFpbC5ydSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IlVzZXIiLCJleHAiOjE3MTE0NjEwNTYsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6NTEzOCIsImF1ZCI6ImFwaXJlZzthcGltYWlsc2VydmVyO2FwaWdhdGV3YXltYWlsIn0.Dnq1YIgEwOFKzTWyKIZqrN2XiTdM9j__pr9XZSa6wZPanLBnLqnyYtQXphgizvL9NpXaE9lwUZNe_p1Z1RcQ9MqbNOs9hXewcAwIHZ1ozuCgz4a2tKVGqUwlf9wyFTiP8JBndogmikCcuiH5j7w5PpL4Gj7QV2iUVirnU1tOXVbRXkUUH0LzxVqOojcj16f_QxnzYPlVCyuY6pi8f1lMzglHz_Ukpo7pK2SbysAY22D9B0WniB8pP5FCHRVTzhhxSdpLtUOdjkXLx1b6ZZEfuzTF6oiltc8W3hSfgtyeHDUbHFDKIZAh-RX8egs8ADCRUOhOyyFN2vcc4JZJRd-wyQ",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5241/User/DeleteUser?userId=",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5241",
					"path": [
						"User",
						"DeleteUser"
					],
					"query": [
						{
							"key": "userId",
							"value": ""
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}